# Flask #5: Сохранение информации в cookies браузера

from flask import Flask, render_template, make_response,request, url_for

app = Flask(__name__)


# с помощью функции make_response можно передавать информацию для cookies браузера
# информация будет храниться в браузере клиента и передаваться серверу при каждом очередном запросе к нашему сайту
# чтобы работать с cookies через объект ответа, используется функция
# set_cookie(key, value="", max_age=None)
# key – название куки;
# value – данные, которые сохраняются в cookies под указанным ключом;
# max_age – необязательный аргумент, указывающий предельное время хранения данных cookies в барузере клиента (в секундах).
# Если время не указывается, то куки пропадут при закрытии браузера

# значение cookies можно получить с помощью объекта request. Приходит запрос от клиента request, обращаемся к cookies
# получаем по ключу то или иное значение 'logged', которое может быть записано в браузере клиента
# если проверка прошла успешно, считываем значение logged в переменную log.
# вначале проверяем в функции представления login: переданы ли cookies вместе с запросом к странице и если это так,
# то переменная log будет ссылаться на значение с ключом 'logged'.
# res = make_response() - формируем ответ сервера с помощью функции
# Далее, формируется объект ответа и, затем, вызывается метод set_cookie этого объекта.
# Через него устанавливается ключ logged со значение yes.
# В результате, при первом запросе формы в браузер клиента будет записано значение yes и, при повторном обращении,
# объект reques будет ссылаться на cookies с этим ключом.
# Если же требуется сохранять куки в пределах, например, месяца, то это указывается третьим параметром:

# Удаление cookies
# Если требуется удалить определенную информацию из cookies, то для этого в методе set_cookie
# достаточно установить параметр max_age = 0

# Ограничения cookies
# Перед использованием cookies в реальном проекте нужно знать об их особенностях.
# Во-первых, куки небезопасны и все данные, которые в них попадают, видны всем, поэтому в них нельзя хранить пароли,
# данные банковских карт и так далее. Во-вторых, в большинстве браузеров cookies можно отключать и тогда сохранять
# в них данные уже не получится. Причем, сервер об этом знать не будет, метод set_cookie отработает штатно,
# просто данные не будут размещены в браузере и сайт потеряет часть своего функционала.
# Для решения этой проблемы, часто в HTML-страницах размещают JavaScript-код, который проверяет работоспособность cookies
# и при их отключении сообщает пользователю, что сайт будет некорректно работать в этих условиях:
# <script>
#     document.cookie = "ex=1;";
#     if (!document.cookie)
#     {
#          alert("Это сайт требует включенных cookies для своей корректной работы ");
#     }
# </script>


menu = [{"title": "Главная", "url": "/"},
        {"title": "Добавить статью", "url": "/add_post"}]


@app.route("/")
def index():
    return "<h1>Main Page</h1>"

# обработчик login - добавление cookies
@app.route("/login")
def login():
    log = ""
    if request.cookies.get('logged'):
        log = request.cookies.get('logged')

    res = make_response(f"<h1>Форма авторизации</h1>logged: {log}")
    res.set_cookie("logged", "yes", 30*24*3600)
    return res


# обработчик logout - удаление cookies
@app.route("/logout")
def logout():
    res = make_response("Вы больше не авторизованы!</p>")
    res.set_cookie("logged", "", 0)
    return res

# webserver start
if __name__ == "__main__":
    app.run(debug=True)

# Test
# http://127.0.0.1:5000/login        :       "GET /login HTTP/1.1" 200
# http://127.0.0.1:5000/logout       :       "GET /logout HTTP/1.1" 200